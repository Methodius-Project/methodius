<!-- $Id: build.xml,v 1.54 2008/04/15 14:36:52 jasonbaldridge Exp $ -->
<!-- Copyright (C) 2003-6 Jason Baldridge and Michael White -->
<project name="OpenCCG" default="package" basedir=".">
	
  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>
    <property name="year" value="2008"/>
    <property name="version" value="0.9.3"/>

    <echo message="----------- ${Name} ${version} [${year}] ------------"/>

    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="on"/>

    <property name="top.dir" value="."/>
    <property name="src.dir" value="./src"/>
    <property name="bin.dir" value="./bin"/>
    <property name="lib.dir" value="./lib"/>
    <property name="docs.dir" value="./docs"/>
    <property name="packages" value="opennlp.ccg.*"/>

    <property name="build.dir" value="./output"/>
    <property name="build.dest" value="./output/classes"/>
    <property name="build.javadocs" value="${docs.dir}/api"/>
  	
    <path id="build.classpath">
      <pathelement location="${lib.dir}/jdom.jar"/>
      <pathelement location="${lib.dir}/trove.jar"/>
      <pathelement location="${lib.dir}/jline.jar"/>
    </path>

    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>
    <filter token="log" value="true"/>
    <filter token="verbose" value="true"/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   package  --> generates the openccg.jar file (default)"/>
    <echo message="   compile  --> compiles the source code"/>
    <echo message="   javadoc  --> generates the API documentation"/>
    <echo message="   clean    --> cleans up the compilation directory"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Prepares the build directories                                      -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <!-- create directories -->
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dest}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" 
          depends="prepare"
          description="compiles the source code">
  	<javac srcdir="${src.dir}"
           destdir="${build.dest}"
           debug="${debug}"
           deprecation="${deprecation}"
           classpathref="build.classpath"
           nowarn="true"
           excludes="**/.backup.orig/**,srilmbridge/"
           optimize="${optimize}">
    </javac>
  	<subant antfile="${src.dir}/ccg2xml/build.xml" buildpath="${basedir}"/>
  </target>
	
  <!-- =================================================================== -->
  <!-- Creates the jar file                                                -->
  <!-- =================================================================== -->
  <target name="package" 
          depends="compile"
          description="generates the openccg.jar file (default)">
    <jar jarfile="${lib.dir}/${name}.jar">
      <fileset dir="${build.dest}" includes="**"/>
      <fileset dir="${src.dir}" includes="**/*.xsl"/>
      <!-- for grammardoc -->
      <fileset dir="${src.dir}" includes="**/*.css"/>
      <fileset dir="${src.dir}" includes="**/*.js"/>
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the release file                                            -->
	<!--                                                                     -->
	<!-- Note: to create a release based on a clean openccg source           -->
	<!-- directory, create a temporary directory, change to it, and issue    -->
	<!-- the following command:                                              -->
	<!-- $ cvs -d :extssh:user@openccg.cvs.sourceforge.net:/cvsroot/openccg \-->
	<!--     export -r HEAD openccg                                          -->
	<!-- where `user' is your sourceforge user id.                           -->
	<!-- This will export the current (HEAD) revision from CVS with none of  -->
	<!-- the files in your source directory that you haven't yet checked in. -->
  <!-- =================================================================== -->
  <target name="release" depends="document,package">
  	<subant antfile="${docs.dir}/build.xml" buildpath="${basedir}"
  	      target="clean"/>
  	<antcall target="clean"/>
    <tar tarfile="${name}-${version}.tar">
      <tarfileset mode="755" 
                  dir="../"
                  includes="${name}/bin/"/>
      <tarfileset dir="../" 
                  includes="${name}/**" 
                  excludes="${name}/.* **/CVS **/bin/ **/.backup.orig/ ${name}/classes/** ${name}/output/** ${name}/src/srilmbridge/** ${name}/grammars/**/test/ ${name}/grammars/**/apml/"/>
    </tar>
    <gzip src="${name}-${version}.tar" 
          zipfile="../${name}-${version}.tgz" />
    <delete file="${name}-${version}.tar" />
  </target>


  <!-- =================================================================== -->
  <!-- Creates the homepage                                                -->
  <!-- =================================================================== -->
  <target name="homepage" 
          depends="init,document"
          description="generates the API documentation">
    <tar tarfile="${name}-homepage.tar"
         basedir="./docs/"
         includes="**"
         excludes="**/CVS **/.backup.orig" />
    <gzip src="${name}-homepage.tar"
          zipfile="${build.dir}/${name}-homepage.tgz" />
    <delete file="${name}-homepage.tar" />
  </target>


  <!-- =================================================================== -->
  <!-- Creates the documentation                                           -->
  <!-- =================================================================== -->
  <target name="document" depends="prepare">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${name}"
             doctitle="The ${Name} API v${version}"
             bottom="Copyright &#169; ${year} Jason Baldridge, Gann Bierner and Michael White. All Rights Reserved."
    				 link="http://java.sun.com/j2se/1.5.0/docs/api/"
    />
  	<subant antfile="${docs.dir}/build.xml" buildpath="${basedir}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Cleans targets                                                      -->
  <!-- =================================================================== -->
  <target name="clean" 
          depends="init"
          description="cleans up the directory">
    <delete dir="${build.dir}"/>
    <subant antfile="${src.dir}/ccg2xml/build.xml" buildpath="${basedir}"
      target="clean"/>
    <delete>
      <fileset dir="${bin.dir}" includes="*.pyc"/>
    </delete>
  </target>

  <target name="cleandocs" depends="init" description="cleans up the API docs directory, and extra pdf docs">
    <delete dir="${build.javadocs}"/>
  	<subant antfile="${docs.dir}/build.xml" buildpath="${basedir}"
      target="clean"/>
  </target>

</project>

<!-- End of file -->
